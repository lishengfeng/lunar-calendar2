class Lunar {
  bool isleap;
  int lunarDay;
  int lunarMonth;
  int lunarYear;
}

class Solar {
  int solarDay;
  int solarMonth;
  int solarYear;
}

class LunarSolarConverter {
  static const List<int> lunar_month_days = [
    2011,
    38570,
    5546,
    76469,
    2420,
    5302,
    51799,
    2646,
    5414,
    36501,
    3412,
    5546,
    18869,
    2412,
    54446,
    5276,
    6732,
    48422,
    6822,
    2900,
    28010,
    4826,
    92509,
    2394,
    5274,
    55883,
    6730,
    6820,
    47956,
    5812,
    2778,
    18779,
    2358,
    62615,
    5270,
    5450,
    46757,
    3492,
    5556,
    27318,
    4718,
    4242,
    2350,
    3222,
    52554,
    7498,
    3428,
    38252,
    5468,
    4700,
    31022,
    6444,
    64149,
    6804,
    6986,
    43861,
    2772,
    5338,
    35421,
    2650,
    70955,
    5418,
    5780,
    54954,
    5546,
    2740,
    38074,
    5302,
    2646,
    29991,
    3366,
    61011,
    3412,
    5546,
    43445,
    2412,
    5294,
    35406,
    6732,
    72998,
    6820,
    6996,
    52586,
    2778,
    2396,
    38045,
    5274,
    6698,
    23333,
    6820,
    64338,
    5812,
    2746,
    43355,
    2358,
    5270,
    39499,
    5450,
    79525,
    3492,
    5548,
    51894,
    4718,
    2350,
    35991,
    2710,
    3402,
    28069,
    3412,
    62826,
    5466,
    2652,
    47406,
    5420,
    6804,
    40266,
    6954,
    93013,
    2772,
    5338,
    51805,
    2650,
    5402,
    47765,
    5716,
    5802,
    19157,
    2740,
    62650,
    5302,
    2646,
    46359,
    3350,
    3666,
    38570,
    3434,
    91573,
    2412,
    5294,
    51758,
    6700,
    7446,
    44370,
    6994,
    2922,
    25965,
    1372,
    62557,
    5210,
    6698,
    55957,
    5796,
    6866,
    35674,
    2742,
    83291,
    2230,
    5206,
    54571,
    5418,
    5780,
    46762,
    5546,
    2742,
    25783,
    2222,
    60503,
    2646,
    3370,
    52629,
    2900,
    5482,
    35437,
    2396,
    5294,
    19030,
    6740,
    56618,
    6826,
    2900,
    46442,
    5338,
    2396,
    29867,
    5274,
    64075,
    5714,
    5802,
    51925,
    1460,
    4794,
    35163,
    2358,
    78999,
    3222,
    3410,
    54953,
    3434,
    1388,
    37558,
    4718,
    2350,
    27798,
    7316,
    64842
  ];
  static const List<int> solar_1_1 = [
    2011,
    1030199,
    1030730,
    64451,
    1031763,
    1032264,
    1032764,
    1033296,
    1033797,
    1034297,
    1034828,
    1035329,
    1035830,
    1036362,
    1036861,
    1037393,
    1037894,
    1038394,
    1038925,
    1039427,
    1039927,
    1040459,
    65059,
    1041491,
    1041992,
    1042492,
    65188,
    1043524,
    1044024,
    1044556,
    1045057,
    1045558,
    1046090,
    1046590,
    1047121,
    1047622,
    1048122,
    1048654,
    1049154,
    1049655,
    1050187,
    1050689,
    1051219,
    1051720,
    1052220,
    65796,
    1053252,
    1053752,
    1054284,
    1054786,
    1055285,
    1055817,
    1056317,
    1056849,
    1057349,
    1057850,
    1058382,
    1058883,
    1059383,
    1059915,
    66275,
    1060947,
    1061447,
    1061947,
    66404,
    1062981,
    1063480,
    1064012,
    1064514,
    1065014,
    1065545,
    1066045,
    1066577,
    1067078,
    1067578,
    1068110,
    1068611,
    1069112,
    1069642,
    1070142,
    1070674,
    1071175,
    1071675,
    67012,
    1072709,
    1073209,
    1073740,
    1074241,
    1074741,
    1075273,
    1075773,
    1076305,
    1076807,
    1077308,
    67364,
    1078340,
    1078840,
    1079372,
    67491,
    1080403,
    1080904,
    1081405,
    1081936,
    1082438,
    1082938,
    1083470,
    1083970,
    1084470,
    1085002,
    1085502,
    1086033,
    1086535,
    1087035,
    67972,
    1088067,
    1088567,
    1089099,
    1089601,
    1090131,
    1090632,
    1091133,
    1091665,
    1092165,
    1092665,
    1093197,
    1093698,
    1094198,
    1094730,
    1095230,
    1095762,
    1096263,
    1096763,
    68580,
    1097796,
    1098295,
    1098827,
    1099329,
    1099860,
    1100360,
    1100861,
    1101392,
    1101893,
    1102393,
    1102924,
    1103426,
    1103927,
    1104458,
    1104958,
    1105490,
    1105991,
    1106490,
    1107022,
    1107523,
    1108024,
    1108555,
    1109057,
    1109588,
    1110089,
    1110588,
    1111120,
    1111621,
    1112121,
    1112652,
    1113154,
    1113655,
    1114187,
    1114686,
    1115218,
    1115719,
    1116219,
    1116750,
    1117251,
    1117752,
    1118284,
    69923,
    1119285,
    1119816,
    1120316,
    70052,
    1121349,
    1121849,
    1122381,
    1122882,
    1123382,
    1123914,
    1124414,
    1124945,
    1125446,
    1125947,
    70404,
    1126980,
    1127481,
    1128013,
    1128514,
    1129044,
    1129545,
    1130045,
    1130577,
    1131078,
    1131578,
    1132110,
    1132612,
    1133111,
    1133642,
    1134142
  ];

  static int getBitInt(int data, int length, int shift) {
    return (data & (((1 << length) - 1) << shift)) >> shift;
  }

  static int solarToInt(int y, int m, int d) {
    m = ((m + 9) % 12);
    y = (y - (m ~/ 10));
    return (((((365 * y) + (y ~/ 4)) - (y ~/ 100)) + (y ~/ 400)) +
            (((m * 306) + 5) ~/ 10)) +
        (d - 1);
  }

  static Solar solarFromInt(int g) {
    int y = (((10000 * g) + 14780) ~/ 3652425);
    int ddd = (g - ((((365 * y) + (y ~/ 4)) - (y ~/ 100)) + (y ~/ 400)));
    if (ddd < 0) {
      y--;
      ddd = (g - ((((365 * y) + (y ~/ 4)) - (y ~/ 100)) + (y ~/ 400)));
    }
    int mi = (((100 * ddd) + 52) ~/ 3060);
    int mm = (((mi + 2) % 12) + 1);
    y = (y + ((mi + 2) ~/ 12));
    int dd = ((ddd - (((mi * 306) + 5) ~/ 10)) + 1);
    Solar solar = new Solar();
    solar.solarYear = y;
    solar.solarMonth = mm;
    solar.solarDay = dd;
    return solar;
  }

  static Solar lunarToSolar(Lunar lunar) {
    int days = lunar_month_days[lunar.lunarYear - lunar_month_days[0]];
    int leap = getBitInt(days, 4, 13);
    int offset = 0;
    int loopend = leap;
    if (!lunar.isleap) {
      if ((lunar.lunarMonth <= leap) || (leap == 0)) {
        loopend = (lunar.lunarMonth - 1);
      } else {
        loopend = lunar.lunarMonth;
      }
    }
    for (int i = 0; i < loopend; i++) {
      offset += ((getBitInt(days, 1, 12 - i) == 1) ? 30 : 29);
    }
    offset += lunar.lunarDay;
    int solar11 = solar_1_1[lunar.lunarYear - solar_1_1[0]];
    int y = getBitInt(solar11, 12, 9);
    int m = getBitInt(solar11, 4, 5);
    int d = getBitInt(solar11, 5, 0);
    return solarFromInt((solarToInt(y, m, d) + offset) - 1);
  }

  static Lunar solarToLunar(Solar solar) {
    Lunar lunar = new Lunar();
    int index = (solar.solarYear - solar_1_1[0]);
    int data =
        (((solar.solarYear << 9) | (solar.solarMonth << 5)) | solar.solarDay);
    int solar11 = 0;
    if (solar_1_1[index] > data) {
      index--;
    }
    solar11 = solar_1_1[index];
    int y = getBitInt(solar11, 12, 9);
    int m = getBitInt(solar11, 4, 5);
    int d = getBitInt(solar11, 5, 0);
    int offset =
        (solarToInt(solar.solarYear, solar.solarMonth, solar.solarDay) -
            solarToInt(y, m, d));
    int days = lunar_month_days[index];
    int leap = getBitInt(days, 4, 13);
    int lunarY = (index + solar_1_1[0]);
    int lunarM = 1;
    int lunarD = 1;
    offset += 1;
    for (int i = 0; i < 13; i++) {
      int dm = ((getBitInt(days, 1, 12 - i) == 1) ? 30 : 29);
      if (offset > dm) {
        lunarM++;
        offset -= dm;
      } else {
        break;
      }
    }
    lunarD = offset;
    lunar.lunarYear = lunarY;
    lunar.lunarMonth = lunarM;
    lunar.isleap = false;
    if ((leap != 0) && (lunarM > leap)) {
      lunar.lunarMonth = (lunarM - 1);
      if (lunarM == (leap + 1)) {
        lunar.isleap = true;
      }
    }
    lunar.lunarDay = lunarD;
    return lunar;
  }
}
